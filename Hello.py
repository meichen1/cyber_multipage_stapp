import pickle
import streamlit as st
import io
import pandas as pd
import time
from helper import cutCatTranformer, columnDropperTransformer, AttackTypeMapping, Prediction_Report
from sklearn.model_selection import train_test_split

pd.set_option("styler.render.max_elements", 2000000)

# loading the trained model
trained_model = 'trained_model/model_xgboost15class.pkl'
model = pickle.load(open(trained_model, 'rb'))

#@st.cache_data(experimental_allow_widgets=True) 


def main():
    
    ## write a front end view for the app
    # html_temp = """
    # <div style="background-color:white;padding:8px">
    # <h2 style="color:grey;text-align:center;">Cyber Attack Detector</h2>
    # </div>
    # """
    ## display the front end aspect
    # st.markdown(html_temp,unsafe_allow_html=True)

    st.title('Cyber Attack Detector')
    st.image('./images/cyberAttackIllustration.png', caption='Generated by Copilot')  
    st.write('ü§ñ Hi! I\'m helping you scan the potential cyberattack from Edge-IIoT network traffic records.')
    st.write('üìà Upload your network traffic records in csv format to start!')
    
    # df = pd.DataFrame()
    # dataset options
    option = st.selectbox(
    'What dataset do you want to use?',
    ('I want to use the default dataset below','I want to upload my own dataset'),
    placeholder="Select ...")
    
    # st.write('You selected:', option)          
    if option == 'I want to upload my own dataset':
        # upload a file
        file = st.file_uploader("Upload file", type=["csv"])
    if option == 'I want to use the default dataset below':
        file = 'datasets/ML-EdgeIIOT-testdata.csv'
        
    
    if file is not None:
        try:
            df = pd.read_csv(file, low_memory=False)
            X,y = df.drop(columns=['Attack_label', 'Attack_type']), df['Attack_type']
            
            st.write('‚ù§Ô∏è You have successfully uploaded your data!')
            st.subheader('Data')
            st.write(df.head())
            st.write('The number of rows:', df.shape[0], ', The number of columns:', df.shape[1])
        
            # Add a new column called 'select' with default value False as the first column
            # X.insert(0, 'select', False)            
            # edited_df = st.data_editor(
            #                 X,
            #                 column_config={
            #                     "select": st.column_config.CheckboxColumn(
            #                         "select",
            #                         help="Select your **network traffic** for attack prediction",
            #                         default=False,
            #                     )
            #                 },
            #                 hide_index=True
            #             )           
            
            
            # set a slider for sample data for model prediction
            st.subheader('Detection')
            values = st.slider(
                '‚ö° Select the percentage of records you want for scanning',
                0.0, 100.0, (20.0))
            st.write('I\'ll scan', values,'%', 'of the records for you.')

        except Exception as e:
            st.write(str(e))

    

    # if successfully read in the dataset -> display the button    
    if st.button('Scan your records'):
        try:
            X_train, X, y_train, y = train_test_split(X, y, test_size=values/100.0)

            # set the selected rows for prediction
            # selected_indices = edited_df.loc[edited_df["select"] == True].index.values
            # X = X.loc[selected_indices]
            # y = y.loc[selected_indices]


            # call labelEncoder_y.encode in the helper.py to encode the 15 multiclasses
            attackTypeMapping = AttackTypeMapping()
            y = attackTypeMapping.map_type2value(y)

            # predict
            predictions = model.predict(X)
            
            # progress bar
            progress_text = "In progress. Please wait."
            my_bar = st.progress(0, text=progress_text)
            for percent_complete in range(100):
                time.sleep(0.01)
                my_bar.progress(percent_complete + 1, text=progress_text)
            time.sleep(1)
            my_bar.empty()

            # print the prediction
            st.subheader('Prediction Results')
            st.write('üë®üèø‚Äçüíª Here are the results! Suspicious cyber attack records were highlighted in red!')
            prediction_output = pd.DataFrame(attackTypeMapping.map_value2type(predictions), columns = ['Attack_Type_Prediction'])
            prediction_output = pd.concat([prediction_output, X.reset_index(drop=True)], axis=1)
            st.dataframe(prediction_output.style.applymap(highlight_attack, subset=['Attack_Type_Prediction']))

            # report
            st.subheader('Prediction Report')
            st.write('üë®üèø‚Äçüíª Here are the prediction report of all types of cyber attack!')
            prediction_report = Prediction_Report()

            precision, recall, fscore = prediction_report.report_precision_recall(y, predictions)
            col1, col2, col3 = st.columns(3)
            col1.metric("precision", precision)
            col2.metric("recall", recall)
            col3.metric("f score", fscore)

            fig = prediction_report.plot_confusion_matrix(y, predictions, attackTypeMapping)
            st.pyplot(fig)
            
        except Exception as e:
            st.write(str(e))



# customized styling func
def highlight_attack(val):
    color = 'white' if val == 'Normal' else '#ffe6e6'
    return f'background-color: {color}'


if __name__ == '__main__':
    main()
    
    